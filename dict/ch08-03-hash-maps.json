{
  "Storing Keys with Associated Values in Hash Maps": {
    "_translate": "<a class=\"header\" href=\"#storing-keys-with-associated-values-in-hash-maps\">在哈希映射中存储带有相关值的键</a>",
    "_note": ""
  },
  "Hash maps are useful when you want to look up data not by using an index, as you can with vectors, but by using a key that can be of any type. For example, in a game, you could keep track of each team’s score in a hash map in which each key is a team’s name and the values are each team’s score. Given a team name, you can retrieve its score.": {
    "_translate": "哈希映射在你想要通过键而不是像使用向量那样通过索引来查找数据时非常有用，键可以是任何类型。例如，在游戏中，你可以使用哈希映射来跟踪每个团队的得分，其中每个键是团队的名称，值是每个团队的得分。给定一个团队名称，你可以检索其得分。",
    "_note": ""
  },
  "The last of our common collections is the hash map. The type HashMap<K, V> stores a mapping of keys of type K to values of type V using a hashing function, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as hash, map, object, hash table, dictionary, or associative array, just to name a few.": {
    "_translate": "我们最后一种常见的集合是<em>哈希映射</em>。类型<code>HashMap&lt;K, V&gt;</code>\n存储了从类型为<code>K</code>的键到类型为<code>V</code>的值的映射，使用一个<em>哈希函数</em>，该函数决定了这些键和值如何被放置到内存中。\n许多编程语言支持这种数据结构，但它们通常使用不同的名称，例如<em>哈希</em>、<em>映射</em>、<em>对象</em>、<em>哈希表</em>、\n<em>字典</em>或<em>关联数组</em>，仅举几例。",
    "_note": ""
  },
  "We’ll go over the basic API of hash maps in this section, but many more goodies are hiding in the functions defined on HashMap<K, V> by the standard library. As always, check the standard library documentation for more information.": {
    "_translate": "我们将在这部分介绍哈希映射的基本 API，但标准库中定义的 <code>HashMap&lt;K, V&gt;</code> 还隐藏着许多其他功能。如往常一样，更多详细信息请查阅标准库文档。",
    "_note": ""
  },
  "Creating a New Hash Map": {
    "_translate": "<a class=\"header\" href=\"#creating-a-new-hash-map\">创建新的哈希映射</a>",
    "_note": ""
  },
  "One way to create an empty hash map is to use new and to add elements with insert. In Listing 8-20, we’re keeping track of the scores of two teams whose names are Blue and Yellow. The Blue team starts with 10 points, and the Yellow team starts with 50.": {
    "_translate": "创建一个空的哈希映射的一种方法是使用<code>new</code>并使用<code>insert</code>添加元素。在清单8-20中，我们正在跟踪两个团队的得分，这两个团队的名字分别是<em>蓝色</em>和<em>黄色</em>。蓝色团队从10分开始，黄色团队从50分开始。",
    "_note": ""
  },
  "Note that we need to first use the HashMap from the collections portion of the standard library. Of our three common collections, this one is the least often used, so it’s not included in the features brought into scope automatically in the prelude. Hash maps also have less support from the standard library; there’s no built-in macro to construct them, for example.": {
    "_translate": "请注意，我们需要首先 <code>use</code> 来自标准库集合部分的 <code>HashMap</code>。在我们常用的三种集合中，这个集合使用频率最低，因此没有包含在预定义模块中自动引入的功能范围内。哈希映射在标准库中的支持也较少；例如，没有内置的宏来构造它们。",
    "_note": ""
  },
  "Accessing Values in a Hash Map": {
    "_translate": "<a class=\"header\" href=\"#accessing-values-in-a-hash-map\">访问哈希映射中的值</a>",
    "_note": ""
  },
  "Just like vectors, hash maps store their data on the heap. This HashMap has keys of type String and values of type i32. Like vectors, hash maps are homogeneous: all of the keys must have the same type, and all of the values must have the same type.": {
    "_translate": "就像向量一样，哈希映射将其数据存储在堆上。这个<code>HashMap</code>具有类型为<code>String</code>的键和类型为<code>i32</code>的值。像向量一样，哈希映射是同质的：所有键必须具有相同的类型，所有值必须具有相同的类型。",
    "_note": ""
  },
  "We can get a value out of the hash map by providing its key to the get method, as shown in Listing 8-21.": {
    "_translate": "我们可以通过向 <code>get</code> 方法提供其键来从哈希映射中获取值，如清单 8-21 所示。",
    "_note": ""
  },
  "Here, score will have the value that’s associated with the Blue team, and the result will be 10. The get method returns an Option<&V>; if there’s no value for that key in the hash map, get will return None. This program handles the Option by calling copied to get an Option<i32> rather than an Option<&i32>, then unwrap_or to set score to zero if scores doesn’t have an entry for the key.": {
    "_translate": "这里，<code>score</code> 将拥有与 Blue 队相关联的值，结果将是 <code>10</code>。<code>get</code> 方法返回一个 <code>Option&lt;&amp;V&gt;</code>；如果哈希映射中没有该键的值，<code>get</code> 将返回 <code>None</code>。此程序通过调用 <code>copied</code> 将 <code>Option&lt;&amp;i32&gt;</code> 转换为 <code>Option&lt;i32&gt;</code>，然后使用 <code>unwrap_or</code> 如果 <code>scores</code> 没有该键的条目，则将 <code>score</code> 设置为零。",
    "_note": ""
  },
  "We can iterate over each key–value pair in a hash map in a similar manner as we do with vectors, using a for loop:": {
    "_translate": "我们可以使用 <code>for</code> 循环以类似于处理向量的方式遍历哈希映射中的每个键值对：",
    "_note": ""
  },
  "This code will print each pair in an arbitrary order:": {
    "_translate": "这段代码将以任意顺序打印每对：<code>println!(\"{:?}\", pair);</code>",
    "_note": ""
  },
  "Hash Maps and Ownership": {
    "_translate": "<a class=\"header\" href=\"#hash-maps-and-ownership\">哈希映射和所有权</a>",
    "_note": ""
  },
  "We aren’t able to use the variables field_name and field_value after they’ve been moved into the hash map with the call to insert.": {
    "_translate": "我们无法在将 <code>field_name</code> 和 <code>field_value</code> 移动到哈希映射中后使用它们，调用 <code>insert</code> 之后。",
    "_note": ""
  },
  "For types that implement the Copy trait, like i32, the values are copied into the hash map. For owned values like String, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing 8-22.": {
    "_translate": "对于实现了 <code>Copy</code> 特性的类型，如 <code>i32</code>，值会被复制到哈希映射中。对于像 <code>String</code> 这样的拥有值，值将被移动，并且哈希映射将成为这些值的所有者，如清单 8-22 所示。",
    "_note": ""
  },
  "Updating a Hash Map": {
    "_translate": "<a class=\"header\" href=\"#updating-a-hash-map\">更新哈希映射</a>",
    "_note": ""
  },
  "Although the number of key and value pairs is growable, each unique key can only have one value associated with it at a time (but not vice versa: for example, both the Blue team and the Yellow team could have the value 10 stored in the scores hash map).": {
    "_translate": "虽然键值对的数量是可增长的，但每个唯一的键一次只能有一个值与之关联（但反之则不然：例如，Blue 队和 Yellow 队都可以在 <code>scores</code> 哈希映射中存储值 <code>10</code>）。",
    "_note": ""
  },
  "If we insert references to values into the hash map, the values won’t be moved into the hash map. The values that the references point to must be valid for at least as long as the hash map is valid. We’ll talk more about these issues in the “Validating References with Lifetimes” section in Chapter 10.": {
    "_translate": "如果我们插入值的引用到哈希映射中，这些值不会被移动到哈希映射中。引用指向的值必须至少与哈希映射的生命周期一样长。我们将在第10章的<a href=\"ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\">“使用生命周期验证引用”</a><!-- ignore -->部分详细讨论这些问题。",
    "_note": ""
  },
  "If we insert a key and a value into a hash map and then insert that same key with a different value, the value associated with that key will be replaced. Even though the code in Listing 8-23 calls insert twice, the hash map will only contain one key–value pair because we’re inserting the value for the Blue team’s key both times.": {
    "_translate": "如果我们向哈希映射中插入一个键和一个值，然后用不同的值再次插入同一个键，与该键关联的值将被替换。即使列表 8-23 中的代码调用了两次 <code>insert</code>，哈希映射也只会包含一个键值对，因为我们两次都是为 Blue 队的键插入值。",
    "_note": ""
  },
  "This code will print {\"Blue\": 25}. The original value of 10 has been overwritten.": {
    "_translate": "这段代码将打印 <code>{\"Blue\": 25}</code>。原始值 <code>10</code> 已被覆盖。",
    "_note": ""
  },
  "When you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned. You could replace the old value with the new value, completely disregarding the old value. You could keep the old value and ignore the new value, only adding the new value if the key doesn’t already have a value. Or you could combine the old value and the new value. Let’s look at how to do each of these!": {
    "_translate": "当你想要更改哈希映射中的数据时，你必须决定如何处理键已经分配了值的情况。你可以用新值替换旧值，完全忽略旧值。你可以保留旧值并忽略新值，只有在键尚未拥有一个值时才添加新值。或者你可以将旧值和新值结合起来。让我们看看如何做到每一种！",
    "_note": ""
  },
  "It’s common to check whether a particular key already exists in the hash map with a value and then to take the following actions: if the key does exist in the hash map, the existing value should remain the way it is; if the key doesn’t exist, insert it and a value for it.": {
    "_translate": "通常会检查哈希映射中是否已存在某个键及其值，然后采取以下操作：如果键存在于哈希映射中，则保持现有值不变；如果键不存在，则插入该键及其值。",
    "_note": ""
  },
  "Hash maps have a special API for this called entry that takes the key you want to check as a parameter. The return value of the entry method is an enum called Entry that represents a value that might or might not exist. Let’s say we want to check whether the key for the Yellow team has a value associated with it. If it doesn’t, we want to insert the value 50, and the same for the Blue team. Using the entry API, the code looks like Listing 8-24.": {
    "_translate": "哈希映射为此提供了一个特殊的 API，称为 <code>entry</code>，它接受你想要检查的键作为参数。<code>entry</code> 方法的返回值是一个名为 <code>Entry</code> 的枚举，表示可能存在或可能不存在的值。假设我们想要检查 Yellow 队的键是否有关联的值。如果没有，我们希望插入值 <code>50</code>，对于 Blue 队也是如此。使用 <code>entry</code> API，代码如清单 8-24 所示。",
    "_note": ""
  },
  "The or_insert method on Entry is defined to return a mutable reference to the value for the corresponding Entry key if that key exists, and if not, it inserts the parameter as the new value for this key and returns a mutable reference to the new value. This technique is much cleaner than writing the logic ourselves and, in addition, plays more nicely with the borrow checker.": {
    "_translate": "<code>or_insert</code> 方法在 <code>Entry</code> 上定义为，如果该键存在，则返回对应 <code>Entry</code> 键的值的可变引用；如果不存在，则将参数作为此键的新值插入，并返回新值的可变引用。这种技术比我们自己编写逻辑要干净得多，并且与借用检查器更友好。",
    "_note": ""
  },
  "Running the code in Listing 8-24 will print {\"Yellow\": 50, \"Blue\": 10}. The first call to entry will insert the key for the Yellow team with the value 50 because the Yellow team doesn’t have a value already. The second call to entry will not change the hash map because the Blue team already has the value 10.": {
    "_translate": "运行清单 8-24 中的代码将打印 <code>{\"Yellow\": 50, \"Blue\": 10}</code>。第一次调用 <code>entry</code> 会插入 Yellow 队的键，值为 <code>50</code>，因为 Yellow 队还没有值。第二次调用 <code>entry</code> 不会更改哈希映射，因为 Blue 队已经有值 <code>10</code>。",
    "_note": ""
  },
  "Another common use case for hash maps is to look up a key’s value and then update it based on the old value. For instance, Listing 8-25 shows code that counts how many times each word appears in some text. We use a hash map with the words as keys and increment the value to keep track of how many times we’ve seen that word. If it’s the first time we’ve seen a word, we’ll first insert the value 0.": {
    "_translate": "另一个常见的哈希映射用例是查找键的值，然后根据旧值进行更新。例如，列表 8-25 显示了计算每个单词在某些文本中出现次数的代码。我们使用一个哈希映射，将单词作为键，并递增值以跟踪我们看到该单词的次数。如果这是我们第一次看到一个单词，我们将首先插入值 <code>0</code>。",
    "_note": ""
  },
  "This code will print {\"world\": 2, \"hello\": 1, \"wonderful\": 1}. You might see the same key–value pairs printed in a different order: recall from the “Accessing Values in a Hash Map” section that iterating over a hash map happens in an arbitrary order.": {
    "_translate": "这段代码将打印 <code>{\"world\": 2, \"hello\": 1, \"wonderful\": 1}</code>。你可能会看到\n相同的键值对以不同的顺序打印：回想一下 <a href=\"#accessing-values-in-a-hash-map\">“访问哈希映射中的值”</a><!-- ignore --> 部分，\n遍历哈希映射的顺序是任意的。",
    "_note": ""
  },
  "Hashing Functions": {
    "_translate": "<a class=\"header\" href=\"#hashing-functions\">哈希函数</a>",
    "_note": ""
  },
  "The split_whitespace method returns an iterator over subslices, separated by whitespace, of the value in text. The or_insert method returns a mutable reference (&mut V) to the value for the specified key. Here, we store that mutable reference in the count variable, so in order to assign to that value, we must first dereference count using the asterisk (*). The mutable reference goes out of scope at the end of the for loop, so all of these changes are safe and allowed by the borrowing rules.": {
    "_translate": "<code>split_whitespace</code> 方法返回一个迭代器，该迭代器遍历 <code>text</code> 中由空白分隔的子切片。<code>or_insert</code> 方法返回一个指向指定键值的可变引用 (<code>&amp;mut V</code>)。在这里，我们将这个可变引用存储在 <code>count</code> 变量中，因此为了给该值赋值，我们必须首先使用星号 (<code>*</code>) 对 <code>count</code> 进行解引用。可变引用在 <code>for</code> 循环结束时超出作用域，因此所有这些更改都是安全的，并且符合借用规则。",
    "_note": ""
  },
  "https://en.wikipedia.org/wiki/SipHash": {
    "_translate": "<a href=\"https://en.wikipedia.org/wiki/SipHash\">https://zh.wikipedia.org/wiki/SipHash</a>",
    "_note": ""
  },
  "Summary": {
    "_translate": "<a class=\"header\" href=\"#summary\">摘要</a>",
    "_note": ""
  },
  "Vectors, strings, and hash maps will provide a large amount of functionality necessary in programs when you need to store, access, and modify data. Here are some exercises you should now be equipped to solve:": {
    "_translate": "向量、字符串和哈希映射将在你需要存储、访问和修改数据的程序中提供大量必要的功能。这里有一些你现在应该能够解决的练习：",
    "_note": ""
  },
  "The standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!": {
    "_translate": "标准库 API 文档描述了向量、字符串和哈希映射具有的方法，这些方法对这些练习将有所帮助！",
    "_note": ""
  },
  "We’re getting into more complex programs in which operations can fail, so it’s a perfect time to discuss error handling. We’ll do that next!": {
    "_translate": "我们正在进入更复杂的程序，在这些程序中操作可能会失败，因此现在是讨论错误处理的绝佳时机。我们接下来就来做这件事！",
    "_note": ""
  },
  "By default, HashMap uses a hashing function called SipHash that can provide resistance to denial-of-service (DoS) attacks involving hash tables1. This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it. If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher. A hasher is a type that implements the BuildHasher trait. We’ll talk about traits and how to implement them in Chapter 10. You don’t necessarily have to implement your own hasher from scratch; crates.io has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.": {
    "_translate": "默认情况下，<code>HashMap</code> 使用一种称为 <em>SipHash</em> 的哈希函数，可以提供针对涉及哈希表的拒绝服务 (DoS) 攻击的防护<sup class=\"footnote-reference\"><a href=\"#siphash\">1</a></sup><!-- ignore -->。这不是最快的哈希算法，但性能下降带来的更好安全性是值得的。如果你对代码进行了剖析并发现默认的哈希函数对于你的用途来说太慢，你可以通过指定不同的哈希器来切换到其他函数。一个 <em>哈希器</em> 是实现了 <code>BuildHasher</code> 特性的类型。我们将在 <a href=\"ch10-02-traits.html\">第 10 章</a><!-- ignore --> 中讨论特性以及如何实现它们。你不必一定从头开始实现自己的哈希器；<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> 有其他 Rust 用户共享的库，提供了实现许多常见哈希算法的哈希器。",
    "_note": ""
  },
  "Storing Keys with Associated Values in Hash Maps - The Rust Programming Language": {
    "_translate": "在哈希映射中存储带有相关值的键 - 《Rust编程语言》",
    "_note": ""
  },
  "Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list.": {
    "_translate": "给定一个整数列表，使用向量并返回列表的中位数（排序后中间位置的值）和众数（出现次数最多的值；这里使用哈希映射会有帮助）。",
    "_note": ""
  },
  "Convert strings to pig latin. The first consonant of each word is moved to the end of the word and ay is added, so first becomes irst-fay. Words that start with a vowel have hay added to the end instead (apple becomes apple-hay). Keep in mind the details about UTF-8 encoding!": {
    "_translate": "将字符串转换为猪拉丁文。每个单词的第一个辅音移到单词的末尾，并加上<em>ay</em>，所以<em>first</em>变成<em>irst-fay</em>。以元音开头的单词在末尾加上<em>hay</em>（<em>apple</em>变成<em>apple-hay</em>）。请记住UTF-8编码的细节！",
    "_note": ""
  },
  "Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company; for example, “Add Sally to Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically.": {
    "_translate": "使用哈希映射和向量，创建一个文本界面，允许用户将员工姓名添加到公司的部门中；例如，“将 Sally 添加到工程部”或“将 Amir 添加到销售部”。然后让用户检索某个部门中所有人员的列表或按部门排序的公司中所有人员的列表，按字母顺序排列。",
    "_note": ""
  },
  "Overwriting a Value": {
    "_translate": "<a class=\"header\" href=\"#overwriting-a-value\">覆盖一个值</a>",
    "_note": ""
  },
  "Adding a Key and Value Only If a Key Isn’t Present": {
    "_translate": "<a class=\"header\" href=\"#adding-a-key-and-value-only-if-a-key-isnt-present\">仅在键不存在时添加键和值</a>",
    "_note": ""
  },
  "Updating a Value Based on the Old Value": {
    "_translate": "<a class=\"header\" href=\"#updating-a-value-based-on-the-old-value\">根据旧值更新值</a>",
    "_note": ""
  },
  "We can iterate over each key-value pair in a hash map in a similar manner as we do with vectors, using a for loop:": {
    "_translate": "我们可以使用 <code>for</code> 循环以类似于处理向量的方式遍历哈希映射中的每个键值对：",
    "_note": ""
  },
  "If we insert references to values into the hash map, the values won’t be moved into the hash map. The values that the references point to must be valid for at least as long as the hash map is valid. We’ll talk more about these issues in “Validating References with Lifetimes” in Chapter 10.": {
    "_translate": "如果我们插入对值的引用到哈希映射中，这些值不会被移动到哈希映射中。引用所指向的值必须至少与哈希映射的生命周期一样长。我们将在<a href=\"ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\">“使用生命周期验证引用”</a><!-- ignore -->第十章中更详细地讨论这些问题。",
    "_note": ""
  },
  "If we insert a key and a value into a hash map and then insert that same key with a different value, the value associated with that key will be replaced. Even though the code in Listing 8-23 calls insert twice, the hash map will only contain one key-value pair because we’re inserting the value for the Blue team’s key both times.": {
    "_translate": "如果我们向哈希映射中插入一个键和一个值，然后用不同的值再次插入同一个键，与该键关联的值将被替换。即使列表 8-23 中的代码调用了两次 <code>insert</code>，哈希映射也只会包含一个键值对，因为我们两次都是为 Blue 队的键插入值。",
    "_note": ""
  },
  "This code will print {\"world\": 2, \"hello\": 1, \"wonderful\": 1}. You might see the same key-value pairs printed in a different order: recall from “Accessing Values in a Hash Map” that iterating over a hash map happens in an arbitrary order.": {
    "_translate": "这段代码将打印 <code>{\"world\": 2, \"hello\": 1, \"wonderful\": 1}</code>。你可能会看到\n相同的键值对以不同的顺序打印：回想 <a href=\"#accessing-values-in-a-hash-map\">“访问哈希映射中的值”</a><!-- ignore --> 中所述，遍历哈希映射\n的顺序是任意的。",
    "_note": ""
  },
  "https://en.wikipedia.org/wiki/SipHash ↩": {
    "_translate": "<p><a href=\"https://en.wikipedia.org/wiki/SipHash\">https://zh.wikipedia.org/wiki/SipHash</a> <a href=\"#fr-siphash-1\">↩</a></p>",
    "_note": ""
  }
}
