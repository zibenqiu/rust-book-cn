{
  "Separating Modules into Different Files": {
    "_translate": "<a class=\"header\" href=\"#separating-modules-into-different-files\">将模块分离到不同的文件中</a>",
    "_note": ""
  },
  "So far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.": {
    "_translate": "到目前为止，本章中的所有示例都在一个文件中定义了多个模块。\n当模块变大时，您可能希望将它们的定义移到单独的文件中，以使代码更容易导航。",
    "_note": ""
  },
  "For example, let’s start from the code in Listing 7-17 that had multiple restaurant modules. We’ll extract modules into files instead of having all the modules defined in the crate root file. In this case, the crate root file is src/lib.rs, but this procedure also works with binary crates whose crate root file is src/main.rs.": {
    "_translate": "例如，让我们从列表 7-17 中的代码开始，该代码有多个 restaurant 模块。我们将把模块提取到文件中，而不是在 crate 根文件中定义所有模块。在这种情况下，crate 根文件是 <em>src/lib.rs</em>，但此过程也适用于 crate 根文件为 <em>src/main.rs</em> 的二进制 crate。",
    "_note": ""
  },
  "Next, place the code that was in the curly brackets into a new file named src/front_of_house.rs, as shown in Listing 7-22. The compiler knows to look in this file because it came across the module declaration in the crate root with the name front_of_house.": {
    "_translate": "接下来，将大括号中的代码放入一个名为<em>src/front_of_house.rs</em>的新文件中，如清单7-22所示。编译器知道在该文件中查找是因为它在crate根目录中遇到了名为<code>front_of_house</code>的模块声明。",
    "_note": ""
  },
  "First we’ll extract the front_of_house module to its own file. Remove the code inside the curly brackets for the front_of_house module, leaving only the mod front_of_house; declaration, so that src/lib.rs contains the code shown in Listing 7-21. Note that this won’t compile until we create the src/front_of_house.rs file in Listing 7-22.": {
    "_translate": "首先我们将 <code>front_of_house</code> 模块提取到其自己的文件中。删除 <code>front_of_house</code> 模块的大括号内的代码，只保留 <code>mod front_of_house;</code> 声明，这样 <em>src/lib.rs</em> 将包含如清单 7-21 所示的代码。请注意，直到我们在清单 7-22 中创建 <em>src/front_of_house.rs</em> 文件之前，这将无法编译。",
    "_note": ""
  },
  "Next, we’ll extract the hosting module to its own file. The process is a bit different because hosting is a child module of front_of_house, not of the root module. We’ll place the file for hosting in a new directory that will be named for its ancestors in the module tree, in this case src/front_of_house.": {
    "_translate": "接下来，我们将把<code>hosting</code>模块提取到它自己的文件中。这个过程有点不同，因为<code>hosting</code>是<code>front_of_house</code>的子模块，而不是根模块的子模块。我们将把<code>hosting</code>的文件放在一个新目录中，该目录将以模块树中的祖先命名，在这种情况下为<em>src/front_of_house</em>。",
    "_note": ""
  },
  "To start moving hosting, we change src/front_of_house.rs to contain only the declaration of the hosting module:": {
    "_translate": "要开始移动<code>hosting</code>，我们更改<em>src/front_of_house.rs</em>以仅包含<code>hosting</code>模块的声明：",
    "_note": ""
  },
  "Then we create a src/front_of_house directory and a hosting.rs file to contain the definitions made in the hosting module:": {
    "_translate": "然后我们创建一个 <em>src/front_of_house</em> 目录和一个 <em>hosting.rs</em> 文件来\n包含在 <code>hosting</code> 模块中定义的内容：",
    "_note": ""
  },
  "Note that you only need to load a file using a mod declaration once in your module tree. Once the compiler knows the file is part of the project (and knows where in the module tree the code resides because of where you’ve put the mod statement), other files in your project should refer to the loaded file’s code using a path to where it was declared, as covered in the “Paths for Referring to an Item in the Module Tree” section. In other words, mod is not an “include” operation that you may have seen in other programming languages.": {
    "_translate": "请注意，您只需要在模块树中<em>一次</em>使用<code>mod</code>声明来加载文件。一旦编译器知道文件是项目的一部分（并且知道代码在模块树中的位置，因为您放置了<code>mod</code>语句的位置），项目中的其他文件应该使用声明该文件时的路径来引用其代码，如<a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\">“模块树中引用项的路径”</a><!-- ignore -->部分所述。换句话说，<code>mod</code>并不是您可能在其他编程语言中见过的“include”操作。",
    "_note": ""
  },
  "Alternate File Paths": {
    "_translate": "<a class=\"header\" href=\"#alternate-file-paths\">备用文件路径</a>",
    "_note": ""
  },
  "If we instead put hosting.rs in the src directory, the compiler would expect the hosting.rs code to be in a hosting module declared in the crate root, and not declared as a child of the front_of_house module. The compiler’s rules for which files to check for which modules’ code mean the directories and files more closely match the module tree.": {
    "_translate": "如果我们把 <em>hosting.rs</em> 放在 <em>src</em> 目录中，编译器会期望 <em>hosting.rs</em> 代码在 crate 根目录中声明的 <code>hosting</code> 模块中，而不是作为 <code>front_of_house</code> 模块的子模块声明。编译器关于检查哪些模块代码的规则意味着目录和文件更接近模块树。",
    "_note": ""
  },
  "So far we’ve covered the most idiomatic file paths the Rust compiler uses, but Rust also supports an older style of file path. For a module named front_of_house declared in the crate root, the compiler will look for the module’s code in:": {
    "_translate": "到目前为止，我们已经介绍了 Rust 编译器使用的最符合惯用法的文件路径，但 Rust 也支持一种较旧的文件路径风格。对于在 crate 根目录中声明的名为 <code>front_of_house</code> 的模块，编译器将查找模块的代码在：",
    "_note": ""
  },
  "For a module named hosting that is a submodule of front_of_house, the compiler will look for the module’s code in:": {
    "_translate": "对于名为 <code>hosting</code> 的模块，它是 <code>front_of_house</code> 的子模块，编译器将在以下位置查找模块的代码：",
    "_note": ""
  },
  "The main downside to the style that uses files named mod.rs is that your project can end up with many files named mod.rs, which can get confusing when you have them open in your editor at the same time.": {
    "_translate": "使用名为 <em>mod.rs</em> 的文件样式的主要缺点是，你的项目最终可能会有很多名为 <em>mod.rs</em> 的文件，当你同时在编辑器中打开它们时，这可能会变得很混乱。",
    "_note": ""
  },
  "If you use both styles for the same module, you’ll get a compiler error. Using a mix of both styles for different modules in the same project is allowed, but might be confusing for people navigating your project.": {
    "_translate": "如果您在同一模块中同时使用这两种风格，将会得到编译器错误。\n在同一项目中对不同模块使用这两种风格的混合是允许的，但可能会让浏览您项目的人感到困惑。",
    "_note": ""
  },
  "We’ve moved each module’s code to a separate file, and the module tree remains the same. The function calls in eat_at_restaurant will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.": {
    "_translate": "我们将每个模块的代码移到了单独的文件中，模块树保持不变。<code>eat_at_restaurant</code> 中的函数调用无需任何修改即可工作，即使定义位于不同的文件中。这种技术使你可以在模块大小增长时将它们移动到新文件中。",
    "_note": ""
  },
  "Summary": {
    "_translate": "<a class=\"header\" href=\"#summary\">摘要</a>",
    "_note": ""
  },
  "Rust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a use statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the pub keyword.": {
    "_translate": "Rust 让你可以将一个包拆分为多个 crate，并将一个 crate 拆分为模块，因此你可以从一个模块引用在另一个模块中定义的项。你可以通过指定绝对路径或相对路径来实现这一点。这些路径可以通过 <code>use</code> 语句引入作用域，这样你可以在该作用域中多次使用较短的路径来引用项。模块代码默认是私有的，但你可以通过添加 <code>pub</code> 关键字来使定义公开。",
    "_note": ""
  },
  "Note that the pub use crate::front_of_house::hosting statement in src/lib.rs also hasn’t changed, nor does use have any impact on what files are compiled as part of the crate. The mod keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.": {
    "_translate": "请注意，<em>src/lib.rs</em> 中的 <code>pub use crate::front_of_house::hosting</code> 语句也没有改变，<code>use</code> 对哪些文件被编译为 crate 的一部分也没有任何影响。<code>mod</code> 关键字声明模块，Rust 会在与模块同名的文件中查找要放入该模块的代码。",
    "_note": ""
  },
  "In the next chapter, we’ll look at some collection data structures in the standard library that you can use in your neatly organized code.": {
    "_translate": "在下一章中，我们将介绍标准库中的一些集合数据结构，您可以在组织良好的代码中使用这些结构。",
    "_note": ""
  },
  "Separating Modules into Different Files - The Rust Programming Language": {
    "_translate": "将模块拆分到不同的文件中 - 《Rust编程语言》",
    "_note": ""
  },
  "src/front_of_house.rs (what we covered)": {
    "_translate": "<em>src/front_of_house.rs</em> (我们所涵盖的)",
    "_note": ""
  },
  "src/front_of_house/mod.rs (older style, still supported path)": {
    "_translate": "<em>src/front_of_house/mod.rs</em> (较旧的风格，仍然支持的路径)",
    "_note": ""
  },
  "src/front_of_house/hosting.rs (what we covered)": {
    "_translate": "<em>src/front_of_house/hosting.rs</em> (我们所涵盖的)",
    "_note": ""
  },
  "src/front_of_house/hosting/mod.rs (older style, still supported path)": {
    "_translate": "<em>src/front_of_house/hosting/mod.rs</em> (较旧的风格，仍然支持的路径)",
    "_note": ""
  }
}
